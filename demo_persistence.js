const http = require('http');

console.log('üéØ ÊºîÁ§∫Ê≥®ÊÑèÂäõËøΩË∏™Âô®ÁöÑÊï∞ÊçÆÊåÅ‰πÖÂåñÂäüËÉΩ');
console.log('=====================================\n');

// Ê®°ÊãüÁî®Êà∑‰ΩøÁî®Âú∫ÊôØ
async function demonstratePersistence() {
    console.log('üì± Âú∫ÊôØ1: Áî®Êà∑Á¨¨‰∏ÄÊ¨°ÊâìÂºÄÂ∫îÁî®ÔºåÂºÄÂßãËÆ∞ÂΩïÊ¥ªÂä®');
    
    // Ê®°ÊãüÁî®Êà∑ÂºÄÂßã‰∏Ä‰∏™Ê¥ªÂä®
    const activity1 = {
        activities: [{
            id: 'work-1',
            activityName: 'ÁºñÁ®ãÂ∑•‰Ωú',
            startTime: new Date().toISOString(),
            endTime: null,
            duration: 0,
            color: '#FF6B6B'
        }],
        currentActivity: {
            id: 'work-1',
            activityName: 'ÁºñÁ®ãÂ∑•‰Ωú',
            startTime: new Date().toISOString(),
            pausedTime: 0,
            totalElapsed: 0,
            state: 'running'
        }
    };
    
    console.log('‚úÖ Áî®Êà∑ÂºÄÂßãËÆ∞ÂΩï: ÁºñÁ®ãÂ∑•‰Ωú');
    await saveActivity(activity1);
    
    console.log('\nüì± Âú∫ÊôØ2: Áî®Êà∑ÂÖ≥Èó≠Â∫îÁî®ÔºåÊï∞ÊçÆÂ∑≤‰øùÂ≠òÂà∞ÂêéÁ´Ø');
    console.log('üíæ Êï∞ÊçÆÂ∑≤‰øùÂ≠òÂà∞: attention_tracker_activities.json');
    
    // Ê®°ÊãüÁî®Êà∑ÈáçÊñ∞ÊâìÂºÄÂ∫îÁî®
    console.log('\nüì± Âú∫ÊôØ3: Áî®Êà∑ÈáçÊñ∞ÊâìÂºÄÂ∫îÁî®ÔºåÊï∞ÊçÆËá™Âä®ÊÅ¢Â§ç');
    const recoveredData = await getActivities();
    console.log(`‚úÖ ÊÅ¢Â§çÁöÑÊ¥ªÂä®Êï∞Èáè: ${recoveredData.length}`);
    console.log(`üìù ÊÅ¢Â§çÁöÑÊ¥ªÂä®: ${recoveredData[0]?.activityName}`);
    
    // Ê®°ÊãüÁî®Êà∑ÁªßÁª≠ËÆ∞ÂΩï
    console.log('\nüì± Âú∫ÊôØ4: Áî®Êà∑ÁªßÁª≠Ê∑ªÂä†Êñ∞Ê¥ªÂä®');
    const activity2 = {
        activities: [
            ...recoveredData,
            {
                id: 'study-1',
                activityName: 'Â≠¶‰π†Êñ∞ÊäÄËÉΩ',
                startTime: new Date().toISOString(),
                endTime: null,
                duration: 0,
                color: '#4ECDC4'
            }
        ],
        currentActivity: {
            id: 'study-1',
            activityName: 'Â≠¶‰π†Êñ∞ÊäÄËÉΩ',
            startTime: new Date().toISOString(),
            pausedTime: 0,
            totalElapsed: 0,
            state: 'running'
        }
    };
    
    console.log('‚úÖ Áî®Êà∑Ê∑ªÂä†Êñ∞Ê¥ªÂä®: Â≠¶‰π†Êñ∞ÊäÄËÉΩ');
    await saveActivity(activity2);
    
    // ÊúÄÁªàÈ™åËØÅ
    console.log('\nüì± Âú∫ÊôØ5: ÊúÄÁªàÈ™åËØÅÊâÄÊúâÊï∞ÊçÆÈÉΩ‰øùÂ≠òÊàêÂäü');
    const finalData = await getActivities();
    console.log(`‚úÖ ÊúÄÁªàÊ¥ªÂä®ÊÄªÊï∞: ${finalData.length}`);
    finalData.forEach((activity, index) => {
        console.log(`   ${index + 1}. ${activity.activityName} (ID: ${activity.id})`);
    });
    
    console.log('\nüéâ Êï∞ÊçÆÊåÅ‰πÖÂåñÊºîÁ§∫ÂÆåÊàêÔºÅ');
    console.log('üí° ËøôÂ∞±ÊòØÊúâÂêéÁ´ØÂíåÊ≤°ÊúâÂêéÁ´ØÁöÑÂå∫Âà´Ôºö');
    console.log('   ‚ùå Ê≤°ÊúâÂêéÁ´Ø: Âà∑Êñ∞È°µÈù¢Êï∞ÊçÆ‰∏¢Â§±');
    console.log('   ‚úÖ ÊúâÂêéÁ´Ø: Êï∞ÊçÆÊ∞∏‰πÖ‰øùÂ≠òÔºåÈöèÊó∂ÊÅ¢Â§ç');
}

// ‰øùÂ≠òÊ¥ªÂä®Êï∞ÊçÆ
function saveActivity(data) {
    return new Promise((resolve, reject) => {
        const postData = JSON.stringify(data);
        
        const req = http.request({
            hostname: 'localhost',
            port: 3000,
            path: '/api/activities',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(postData)
            }
        }, (res) => {
            let responseData = '';
            res.on('data', (chunk) => {
                responseData += chunk;
            });
            res.on('end', () => {
                try {
                    const result = JSON.parse(responseData);
                    if (result.success) {
                        resolve(result);
                    } else {
                        reject(new Error(result.error));
                    }
                } catch (error) {
                    reject(error);
                }
            });
        });
        
        req.on('error', reject);
        req.write(postData);
        req.end();
    });
}

// Ëé∑ÂèñÊ¥ªÂä®Êï∞ÊçÆ
function getActivities() {
    return new Promise((resolve, reject) => {
        const req = http.request({
            hostname: 'localhost',
            port: 3000,
            path: '/api/activities',
            method: 'GET'
        }, (res) => {
            let data = '';
            res.on('data', (chunk) => {
                data += chunk;
            });
            res.on('end', () => {
                try {
                    const result = JSON.parse(data);
                    resolve(result);
                } catch (error) {
                    reject(error);
                }
            });
        });
        
        req.on('error', reject);
        req.end();
    });
}

// Á≠âÂæÖÊúçÂä°Âô®ÂêØÂä®
function waitForServer() {
    return new Promise((resolve) => {
        const checkServer = () => {
            const req = http.request({
                hostname: 'localhost',
                port: 3000,
                path: '/api/health',
                method: 'GET'
            }, (res) => {
                if (res.statusCode === 200) {
                    console.log('üöÄ ÂêéÁ´ØÊúçÂä°Âô®Â∑≤ÂêØÂä®ÔºåÂºÄÂßãÊºîÁ§∫...\n');
                    resolve();
                } else {
                    setTimeout(checkServer, 1000);
                }
            });
            
            req.on('error', () => {
                setTimeout(checkServer, 1000);
            });
            
            req.end();
        };
        
        checkServer();
    });
}

// ‰∏ªÂáΩÊï∞
async function main() {
    try {
        await waitForServer();
        await demonstratePersistence();
    } catch (error) {
        console.error('‚ùå ÊºîÁ§∫Â§±Ë¥•:', error.message);
    }
}

main();
